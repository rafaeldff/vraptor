[chapter Interceptadores]

[section Para que interceptar]

O uso de interceptadores é feito para executar alguma tarefa antes e/ou depois
de uma lógica de negócios, sendo os usos mais comuns para validação de dados, 
controle de conexão e transação do banco, log e criptografação/compactação de dados.

[section Como interceptar]

No VRaptor 3 utilizamos uma abordagem onde o interceptador define quem será interceptado,
muito mais próxima a abordagens de interceptação que aparecem em sistemas baseados
em AOP (programação orientada a aspectos) do que a abordagem da versão anterior do vraptor.

Portanto, para interceptar uma requisição basta implementar a interface **Interceptor**
e anotar a classe com a anotação **@Intercepts**.

Assim como qualquer outro componente, você pode dizer em que escopo o interceptador,
será armazenado através das anotações de escopo.

[java]
public interface Interceptor {

    void intercept(InterceptorStack stack, ResourceMethod method, 
					Object resourceInstance) throws InterceptionException;

    boolean accepts(ResourceMethod method);

}
[/java]

[section Exemplo simples]

A classe a seguir mostra um exemplo de como interceptar todas as requisições em um escopo de
sessão e simplesmente mostrar na saída do console o que está sendo invocado.

Lembre-se que o interceptador é um componente como qualquer outro e pode receber
em seu construtor quaisquer dependencias atraves de Injecao de Dependencias. 
 
[java]
@Intercepts
@SessionScoped
public class Log implements Interceptor {

	private final HttpServletRequest request;

	public Log(HttpServletRequest request) {
		this.request = request;
	}

    public void intercept(InterceptorStack stack, ResourceMethod method, 
						Object resourceInstance) throws InterceptionException {
    	System.out.println("Interceptando " + request.getRequestURI());
    	stack.next(method, resourceInstance);
    }

    public boolean accepts(ResourceMethod method) {
    	return true;
    }

}
[/java]


[section Exemplo com Hibernate]
Provavelmente, um dos usos mais comuns do Interceptor é para a implementação do famigerado pattern Open Session In View, que
fornece uma conexão com o banco de dados sempre que há uma requisição para sua aplicação. E ao fim dessa requisição, a
conexão é liberada. O grande ganho disso é evitar exceções como LazyInitializationException no momento da renderização dos jsps.

Abaixo, está um simples exemplo, que para todas as requisições abre uma transação com o banco de dados. E ao fim da execução da
lógica e da exibição da página para o usuário, commita a transação e logo em seguida fecha a conexão com o banco.

[java]
@RequestScoped
@Intercepts
public class DatabaseInterceptor implements br.com.caelum.vraptor.Interceptor {

	private final Database controller;
	private final Result result;
	private final HttpServletRequest request;

	public DatabaseInterceptor(Database controller, Result result, HttpServletRequest request) {
		this.controller = controller;
		this.result = result;
		this.request = request;
	}

	public void intercept(InterceptorStack stack, ResourceMethod method, 
							Object instance) throws InterceptionException {
		result.include("contextPath", request.getContextPath());
		try {
			controller.beginTransaction();
			stack.next(method, instance);
			controller.commit();
		} finally {
			if (controller.hasTransaction()) {
				controller.rollback();
			}
			controller.close();
		}
	}

	public boolean accepts(ResourceMethod method) {
		return true;
	}

}
[/java]

Dessa forma, no seu Recurso, bastaria o seguinte código para utilizar a conexão disponível:

[java]
@Resource
public class FuncionarioController {
	
	public FuncionarioController(Result result, Database controller) {
		this.result = result;
		this.controller = controller;
	}
	
	@Post
	@Path("/funcionario")
	public void adiciona(Funcionario funcionario) {
		controller.getFuncionarioDao().adiciona(funcionario);
		...
	}
}
[/java]
