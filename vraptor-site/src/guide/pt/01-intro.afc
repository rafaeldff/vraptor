[chapter VRaptor3 - o guia inicial de 5 minutos]

O VRaptor 3 foca em simplicidade e, portanto, todas as funcionalidades que você verá 
têm como primeira meta resolver o problema do programador da maneira menos intrusiva 
possível em seu código. 

Tanto para salvar, remover, buscar e atualizar ou ainda funcionalidades que 
costumam ser mais complexas como upload e download de arquivos, resultados em 
formatos diferentes (xml, json, xhtml etc), tudo isso é feito através de funcionalidades 
simples do VRaptor 3, que sempre procuram encapsular %%HttpServletRequest%%,
%%Response%%, %%Session%% e toda a API do %%javax.servlet%%. 

[section Inserindo numa base de dados]

Considere que, para persistir dados de nosso catálogo de músicas em nossa base de dados,
temos uma classe que vai agir como um ::Controller:: entre a nossa camada de apresenção 
(um JSP) e nosso modelo (classe %%Music%% e um DAO chamado %%MusicDao%%):

[java]
@Resource
public class MusicController {

	private MusicDao dao;

	public MusicController(MusicDao dao) {
		this.dao = dao;
	}

	public void add(Music music) {
		dao.save(music);
	}
}
[/java]

Utilizamos então a anotação %%@Resource%% para definir que essa classe
poderá ser, de alguma forma, acessada via Web.

Pronto. O VRaptor será capaz de, através de seu container de Injeção de Dependências,
passar um %%MusicDao%% para seu construtor, e invocar o método %%add%% com os parâmetros
adequados de acordo com o que estiver no %%HttpServletRequest%%.

Se os parâmetros do request forem %%music.name%%, %%music.artist%% e %%music.genre%%,
um objeto %%music%% será instanciado e seus respectivos ::setters:: invocados.

[box Reflection no nome dos parâmetros]
Infelizmente, o Java não realiza reflection em cima de parâmetros, esses dados não ficam
disponíveis em bytecode (a não ser se compilado em debug mode, porém é algo opcional). Isso
faz com que a maioria dos frameworks que precisam desse tipo de informção criem uma anotação
própria para isso, o que polui muito o código (exemplo no JAX-WS, onde é comum encontrar um
método como o acima com a assinatura  %%void add(@WebParam(name="music") Music music)%%.

O VRaptor tira proveito do framework Paranamer (http://paranamer.codehaus.org), que consegue 
tirar essaa informação através de pré compilação ou dos dados de debug, evitando criar mais uma 
anotação. Alguns dos desenvolvedores do VRaptor também participam no desenvolvimento do Paranamer.
[/box]

[TODO colocar exemplo completo aqui, com JSPs e com o DAO]

[section para finalizar: o web.xml]

No %%web.xml%%, precisamos apenas adicionar o filtro do VRaptor3, da seguinte forma:

[xml]
<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<!-- declaracao do filtro -->
	<filter>
		<filter-name>vraptor</filter-name>
		<filter-class>br.com.caelum.vraptor.VRaptor</filter-class>
	</filter>

	<!-- mapeando o filtro para todas as requisicoes -->
	<filter-mapping>
		<filter-name>vraptor</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>
</web-app>
[/xml]

Pronto! Você já está apto a fazer o deploy da sua aplicação.

[section Um pouco de REST]

Seguindo a idéia de que %%URI%%s devem identificar recursos na rede para então podermos
fazer valer as diversas vantagens estruturais que o protocolo HTTP nos proporciona, 
note o quão simples fica mapear os diversos métodos HTTP para a mesma URI, e com
isso invocar diferentes métodos:

[java]
@Resource
public class MusicController {

	// ...

	@Post
	@Path("/music")
	public void add(Music music) {
		dao.save(music);
	}
	
	@Get
	@Path("/music")
	public List<Music> list() {
		return dao.findAll();
	}
	
	@Get
	@Path("/music/{music.id}")
	public Music view(Music music) {
		return dao.find(music);
	}
	
	@Delete
	@Path("/music/{music.id}")
	public void remove(Music music) {
		dao.remove(music);
	}
	
	@Put
	@Path("/music/{music.id}")
	public void atualiza(Music music) {
		dao.atualiza(music);
	}
}
[/java]

Para, por exemplo, acessar a música de %%id=3%%, basta acessar a URI %%/music/3%%.

Após a invocação do método %%view%% do seu %%MusicController%%, será feito um
dispatch para o arquivo %%WEB-INF/jsp/music/view.jsp%%, e o objeto %%music%% retornado
pelo método estará exposto como um atributo do %%request%% (como quando você chama
%%request.setAttribute("music", music)%%.

O redirecionamento também é algo inovador e sem configuração em arquivos externos.
Imagine que após a remoção desejamos redirecionar para a listagem:

[java h=5]
	@Delete
	@Path("/music/{music.id}")
	public void remove(Music music) {
		dao.remove(music);
		result.use(logic()).redirectTo(MusicController.class).list();
	}
[/java]

Isto é, estamos dizendo que desejamos, ao término de uma remoção, redirecionar para
a listagem de todas as músicas, invocando o método %%list%%.

O VRaptor resolve a URI que deve ser enviada para o cliente fazer o ::client side
redirect::. Se por algum acaso você mudar a URI de mapeamento desse método, o redirect
continua funcionando!
